image: barichello/godot-ci:mono-4.4.1

# Stages: lint -> prepare -> test -> docs -> build -> deploy
stages:
  - lint
  - prepare
  - test
  - build
  - deploy

variables:
  EXPORT_NAME: InnerAnimaMono
  ITCH_USER:  mkdrdscf
  ITCH_PROJECT: inneranimamono

# Cache to speed up builds
cache:
  key: godot-4.4.1-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  paths:
    - .godot/imported/

# Linter
linter:
  stage: lint
  before_script:
    - dotnet restore
  script:
    - dotnet build --configuration ExportRelease --verbosity normal
    - dotnet format GodotMonoCore.sln --verify-no-changes --verbosity diagnostic
  allow_failure: false

# Open the editor to import assets in case the cache was empty or outdated
assets:
  stage: prepare
  script:
    - rm -rf .import
    - mkdir -p .godot .import
    - godot --headless --verbose --import --quit
  artifacts:
    paths:
      - .import/
      - .godot/imported/
      - .godot/global_script_class_cache.cfg

# Unit Test
gdunit4:
  stage: test
  needs: ["assets"]
  before_script:
    - dotnet restore
    - dotnet tool install -g trx2junit
    - export PATH="$PATH:/root/.dotnet/tools"
    - export GODOT_BIN=/usr/local/bin/godot
  script:
    - dotnet test --settings .runsettings-ci
    - trx2junit TestResults/*.trx --output TestResults/
  artifacts:
    reports:
      junit: TestResults/*.xml
    paths:
      - TestResults/
  allow_failure: false

# Build exports
windows:
  stage: build
  needs: ["assets"]
  script:
    - mkdir -p build/windows
    - godot --headless --verbose --export-release "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows

linux:
  stage: build
  needs: ["assets"]
  script:
    - mkdir -p build/linux
    - godot --headless --verbose --export-release "Linux" ./build/linux/$EXPORT_NAME.x86_64
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux

# macos:
#   stage: build
#   needs: ["gdunit4"]
#   script:
#     - mkdir -p build/macos
#     - godot --headless --verbose --export-release "macOS" ./build/macos/$EXPORT_NAME.dmg
#   artifacts:
#     name: $EXPORT_NAME-$CI_JOB_NAME
#     paths:
#       - build/macos

# web:
#   stage: build
#   needs: ["gdunit4"]
#   script:
#     - mkdir -p build/web
#     - godot --headless --verbose --export-release "Web" ./build/web/index.html
#   artifacts:
#     name: $EXPORT_NAME-$CI_JOB_NAME
#     paths:
#       - build/web

# Deployment to development
# pages:
#   stage: deploy
#   script:
#     - rm -f *.md
#     - mkdir -p public
#     - mv build/web/* ./public/
#   dependencies:
#     - web
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PROJECT_NAMESPACE == "inner-anima"'

# Deployment to production environment
itchio:windows:
  stage: deploy
  script:
    -  butler push ./build/windows ${ITCH_USER}/${ITCH_PROJECT}:windows
  dependencies:
    - windows
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_NAMESPACE == "inner-anima"'

itchio:linux:
  stage: deploy
  script:
    -  butler push ./build/linux ${ITCH_USER}/${ITCH_PROJECT}:linux
  dependencies:
    - linux
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_NAMESPACE == "inner-anima"'

# itchio:macos:
#   stage: deploy
#   script:
#     -  butler push ./build/macos ${ITCH_USER}/${ITCH_PROJECT}:macos
#   dependencies:
#     - macos
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_NAMESPACE == "inner-anima"'

# itchio:web:
#   stage: deploy
#   script:
#     -  butler push ./build/web ${ITCH_USER}/${ITCH_PROJECT}:web
#   dependencies:
#     - web
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main" && $CI_PROJECT_NAMESPACE == "inner-anima"'